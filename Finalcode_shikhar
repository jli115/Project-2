
//#include <Ultrasonic.h>
#include "LedControl.h"
#include "binary.h"
//Ultrasonic sensor (6,5);// PIN 6 = TRIG // PIN 5 = ECHO
LedControl lc = LedControl(8, 10, 9, 1); // DIN = 8  // CS = 9 // CLK = 10


#include <NewPing.h>

#define TRIGGER_PIN  6  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     5  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 150 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.


int dist;

const int  buttonPin = 2;

int buttonPushCounter = 0;   // counter for the number of button presses
int buttonState = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button

unsigned long delaytime = 1000;
// PIN 6 = TRIG // PIN 5 = ECHO
// DIN = 8  // CS = 9 // CLK = 10

//sad
byte ff[8] = {
  B00111100,
  B01000010,
  B10100101,
  B10010001,
  B10010001,
  B10100101,
  B01000010,
  B00111100
};

//smiley
byte ft[8] = {
  B00111100,
  B01000010,
  B10010101,
  B10100001,
  B10100001,
  B10010101,
  B01000010,
  B00111100
};

//grumps
byte fn[8] = {
  B01111100,
  B10000010,
  B10101001,
  B10100001,
  B10100001,
  B10101001,
  B10000010,
  B01111100
};

//cross
byte fl[8] = {
  B10000001,
  B11000011,
  B01100110,
  B00111100,
  B00011000,
  B00111100,
  B01100110,
  B11000011
};

//martini
byte f2[8] = {
  B00000000,
  B00001000,
  B10011000,
  B11111000,
  B10011100,
  B00001010,
  B00000001,
  B00000000
};

//angry
byte f3[8] = {
  B00000001,
  B10000010,
  B01001100,
  B01000100,
  B01000100,
  B01001100,
  B10000010,
  B00000001
};


void setup() {
  pinMode(buttonPin, INPUT);
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);
  Serial.begin(9600);
}

void desenhaFaces() {


}

void loop() {


  // read the pushbutton input pin:
  buttonState = digitalRead(buttonPin);

  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter++;
      if (buttonPushCounter > 2)
      {
        buttonPushCounter = 0;
      }
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  // save the current state as the last state, for next time through the loop
  lastButtonState = buttonState;


  delay(50);                     // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
  Serial.print("Ping: ");
  Serial.print(sonar.ping_cm()); // Send ping, get distance in cm and print result (0 = outside set distance range)
  Serial.println("cm");




  int input = sonar.ping_cm();
  if (input != 0)
  {
    dist = input;
  }

  if (dist < 50) {
    if (buttonPushCounter == 1) {

      lc.setRow(0, 0, f3[0]);
      lc.setRow(0, 1, f3[1]);
      lc.setRow(0, 2, f3[2]);
      lc.setRow(0, 3, f3[3]);
      lc.setRow(0, 4, f3[4]);
      lc.setRow(0, 5, f3[5]);
      lc.setRow(0, 6, f3[6]);
      lc.setRow(0, 7, f3[7]);
    }
    else if (buttonPushCounter == 2) {

      lc.setRow(0, 0, f2[0]);
      lc.setRow(0, 1, f2[1]);
      lc.setRow(0, 2, f2[2]);
      lc.setRow(0, 3, f2[3]);
      lc.setRow(0, 4, f2[4]);
      lc.setRow(0, 5, f2[5]);
      lc.setRow(0, 6, f2[6]);
      lc.setRow(0, 7, f2[7]);
    }
    else {
      lc.setRow(0, 0, ft[0]);
      lc.setRow(0, 1, ft[1]);
      lc.setRow(0, 2, ft[2]);
      lc.setRow(0, 3, ft[3]);
      lc.setRow(0, 4, ft[4]);
      lc.setRow(0, 5, ft[5]);
      lc.setRow(0, 6, ft[6]);
      lc.setRow(0, 7, ft[7]);

    }
  }
  else {
    if (buttonPushCounter == 1) {
      lc.setRow(0, 0, fn[0]);
      lc.setRow(0, 1, fn[1]);
      lc.setRow(0, 2, fn[2]);
      lc.setRow(0, 3, fn[3]);
      lc.setRow(0, 4, fn[4]);
      lc.setRow(0, 5, fn[5]);
      lc.setRow(0, 6, fn[6]);
      lc.setRow(0, 7, fn[7]);
    }


    else {
      lc.setRow(0, 0, ff[0]);
      lc.setRow(0, 1, ff[1]);
      lc.setRow(0, 2, ff[2]);
      lc.setRow(0, 3, ff[3]);
      lc.setRow(0, 4, ff[4]);
      lc.setRow(0, 5, ff[5]);
      lc.setRow(0, 6, ff[6]);
      lc.setRow(0, 7, ff[7]);

    } delay(100);


  }
}
